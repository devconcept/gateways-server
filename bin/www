#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const { tap } = require('rxjs/operators');

const app = require('../app');
const { logError, logMessage } = require('../helpers/loggers');
const { db, client } = require('../data/db');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3100');
app.set('port', port);

db().pipe(
  tap((instance) => {
    app.locals.db = instance;
    /**
         * Create HTTP server.
         */

    const server = http.createServer(app);

    /**
         * Listen on provided port, on all network interfaces.
         */

    /**
         * Event listener for HTTP server "error" event.
         */

    const onError = function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          logError(`${bind} requires elevated privileges`);
          process.exit(1);
          break;
        case 'EADDRINUSE':
          logError(`${bind} is already in use`);
          process.exit(1);
          break;
        default:
          throw error;
      }
    };

    /**
         * Event listener for HTTP server "listening" event.
         */

    const onListening = function onListening() {
      const addr = server.address();
      const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
      logMessage(`Listening on ${bind}`);
    };

    process.on('SIGINT', () => {
      client().pipe(
        tap((clientInstance) => {
          clientInstance.close((err) => process.exit(err ? 1 : 0));
        }),
      ).subscribe();
    });


    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }),
).subscribe();
